static const char *RcsId = "$Header:  $";
//+=============================================================================
//
// file :         PSI_PSCIP2.cpp
//
// description :  C++ source for the PSI_PSCIP2 and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                PSI_PSCIP2 are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name        |  Method name
//	----------------------------------------
//  State               |  dev_state()
//  Status              |  dev_status()
//  On                  |  on()
//  Off                 |  off()
//  Reset               |  reset()
//  ResetInterlocks     |  reset_interlocks()
//  Disable_interlocks  |  disable_interlocks()
//  Enable_interlocks   |  enable_interlocks()
//  Interlocks_status   |  interlocks_status()
//  Read_PSC_register   |  read__psc_register()
//
//===================================================================


#include <tango.h>
#include <PSI_PSCIP2.h>
#include <PSI_PSCIP2Class.h>

namespace PSI_PSCIP2_ns
{

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::PSI_PSCIP2(string &s)
// 
// description : 	constructor for simulated PSI_PSCIP2
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
PSI_PSCIP2::PSI_PSCIP2(Tango::DeviceClass *cl,string &s)
:Tango::Device_3Impl(cl,s.c_str())
{
	init_device();
}

PSI_PSCIP2::PSI_PSCIP2(Tango::DeviceClass *cl,const char *s)
:Tango::Device_3Impl(cl,s)
{
	init_device();
}

PSI_PSCIP2::PSI_PSCIP2(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_3Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::delete_device()
{
	//	Delete device's allocated object
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::init_device()
{
	INFO_STREAM << "PSI_PSCIP2::PSI_PSCIP2() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();
}


//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Channel"));
	dev_prop.push_back(Tango::DbDatum("FODevice"));
	dev_prop.push_back(Tango::DbDatum("InterlockTemperatureBit"));
	dev_prop.push_back(Tango::DbDatum("InterlockFlowBit"));
	dev_prop.push_back(Tango::DbDatum("TangoDevice"));
	dev_prop.push_back(Tango::DbDatum("ConnectionType"));
	dev_prop.push_back(Tango::DbDatum("CurrentFactor"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	PSI_PSCIP2Class	*ds_class =
		(static_cast<PSI_PSCIP2Class *>(get_device_class()));
	int	i = -1;

	//	Try to initialize Channel from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  channel;
	else {
		//	Try to initialize Channel from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  channel;
	}
	//	And try to extract Channel value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  channel;

	//	Try to initialize FODevice from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  fODevice;
	else {
		//	Try to initialize FODevice from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  fODevice;
	}
	//	And try to extract FODevice value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  fODevice;

	//	Try to initialize InterlockTemperatureBit from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  interlockTemperatureBit;
	else {
		//	Try to initialize InterlockTemperatureBit from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  interlockTemperatureBit;
	}
	//	And try to extract InterlockTemperatureBit value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlockTemperatureBit;

	//	Try to initialize InterlockFlowBit from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  interlockFlowBit;
	else {
		//	Try to initialize InterlockFlowBit from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  interlockFlowBit;
	}
	//	And try to extract InterlockFlowBit value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlockFlowBit;

	//	Try to initialize TangoDevice from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  tangoDevice;
	else {
		//	Try to initialize TangoDevice from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  tangoDevice;
	}
	//	And try to extract TangoDevice value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  tangoDevice;

	//	Try to initialize ConnectionType from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  connectionType;
	else {
		//	Try to initialize ConnectionType from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  connectionType;
	}
	//	And try to extract ConnectionType value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  connectionType;

	//	Try to initialize CurrentFactor from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  currentFactor;
	else {
		//	Try to initialize CurrentFactor from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  currentFactor;
	}
	//	And try to extract CurrentFactor value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  currentFactor;



	//	End of Automatic code generation
	//------------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::always_executed_hook()
{
	
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_Imeas
// 
// description : 	Extract real attribute values for Imeas acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_Imeas(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_Imeas(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_CurrentSetpoint
// 
// description : 	Extract real attribute values for CurrentSetpoint acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_CurrentSetpoint(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_CurrentSetpoint(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::write_CurrentSetpoint
// 
// description : 	Write CurrentSetpoint attribute values to hardware.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::write_CurrentSetpoint(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::write_CurrentSetpoint(Tango::WAttribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_Voltage
// 
// description : 	Extract real attribute values for Voltage acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_Voltage(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_Voltage(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_RemoteMode
// 
// description : 	Extract real attribute values for RemoteMode acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_RemoteMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_RemoteMode(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_Current
// 
// description : 	Extract real attribute values for Current acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_Current(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_Current(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_CurrentOffset
// 
// description : 	Extract real attribute values for CurrentOffset acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_CurrentOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_CurrentOffset(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::write_CurrentOffset
// 
// description : 	Write CurrentOffset attribute values to hardware.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::write_CurrentOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::write_CurrentOffset(Tango::WAttribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_Iref
// 
// description : 	Extract real attribute values for Iref acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_Iref(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_Iref(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::write_Iref
// 
// description : 	Write Iref attribute values to hardware.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::write_Iref(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::write_Iref(Tango::WAttribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_ErrorCodes
// 
// description : 	Extract real attribute values for ErrorCodes acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_ErrorCodes(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_ErrorCodes(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_ErrorLabel
// 
// description : 	Extract real attribute values for ErrorLabel acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_ErrorLabel(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_ErrorLabel(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::read_Errors
// 
// description : 	Extract real attribute values for Errors acquisition result.
//
//-----------------------------------------------------------------------------
void PSI_PSCIP2::read_Errors(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PSI_PSCIP2::read_Errors(Tango::Attribute &attr) entering... "<< endl;
}



//+------------------------------------------------------------------
/**
 *	method:	PSI_PSCIP2::on
 *
 *	description:	method to execute "On"
 *	Turn Off Power Supply.
 *
 *
 */
//+------------------------------------------------------------------
void PSI_PSCIP2::on()
{
	DEBUG_STREAM << "PSI_PSCIP2::on(): entering... !" << endl;

	//	Add your own code to control device here

}

//+------------------------------------------------------------------
/**
 *	method:	PSI_PSCIP2::off
 *
 *	description:	method to execute "Off"
 *
 *
 */
//+------------------------------------------------------------------
void PSI_PSCIP2::off()
{
	DEBUG_STREAM << "PSI_PSCIP2::off(): entering... !" << endl;

	//	Add your own code to control device here

}

//+------------------------------------------------------------------
/**
 *	method:	PSI_PSCIP2::reset
 *
 *	description:	method to execute "Reset"
 *	Resets the control unit of the power supply. The exact meaning depends on the control unit.
 *	Usually this will clear the interlocks, if possible, switch off the PC and restart control flow to neutral state.
 *
 *
 */
//+------------------------------------------------------------------
void PSI_PSCIP2::reset()
{
	DEBUG_STREAM << "PSI_PSCIP2::reset(): entering... !" << endl;

	//	Add your own code to control device here

}

//+------------------------------------------------------------------
/**
 *	method:	PSI_PSCIP2::reset_interlocks
 *
 *	description:	method to execute "ResetInterlocks"
 *	Clears error messages/Interlocks
 *
 *
 */
//+------------------------------------------------------------------
void PSI_PSCIP2::reset_interlocks()
{
	DEBUG_STREAM << "PSI_PSCIP2::reset_interlocks(): entering... !" << endl;

	//	Add your own code to control device here

}

//+------------------------------------------------------------------
/**
 *	method:	PSI_PSCIP2::disable_interlocks
 *
 *	description:	method to execute "Disable_interlocks"
 *	This commands disables (masks) all interlock except one, which can be enabled/disabled on the back of PSC
 *
 *
 */
//+------------------------------------------------------------------
void PSI_PSCIP2::disable_interlocks()
{
	DEBUG_STREAM << "PSI_PSCIP2::disable_interlocks(): entering... !" << endl;

	//	Add your own code to control device here

}

//+------------------------------------------------------------------
/**
 *	method:	PSI_PSCIP2::enable_interlocks
 *
 *	description:	method to execute "Enable_interlocks"
 *	Setting back intrlock mask to default value
 *
 *
 */
//+------------------------------------------------------------------
void PSI_PSCIP2::enable_interlocks()
{
	DEBUG_STREAM << "PSI_PSCIP2::enable_interlocks(): entering... !" << endl;

	//	Add your own code to control device here

}

//+------------------------------------------------------------------
/**
 *	method:	PSI_PSCIP2::interlocks_status
 *
 *	description:	method to execute "Interlocks_status"
 *	Disabled - the mask of digital inputs is set to 0xE070 - all interlocks by one are disabled
 *	Enabled - the mask of digital inputs is set to 0xF877 - interlocks enabled
 *
 * @return	Interlocks Status
 *
 */
//+------------------------------------------------------------------
Tango::DevString PSI_PSCIP2::interlocks_status()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[6];
	strcpy(argout, "dummy");
	DEBUG_STREAM << "PSI_PSCIP2::interlocks_status(): entering... !" << endl;

	//	Add your own code to control device here

	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PSI_PSCIP2::read__psc_register
 *
 *	description:	method to execute "Read_PSC_register"
 *	Allows to read any register in PSC
 *	Return format can be set:
 *	f-float,
 *	i-integer,
 *	x-hex, by default x, e
 *	x input: 0x00 x - meaning:  address 0, return value hex
 *
 * @param	argin	Register address and return format (f-float,i-integer,x-hex, by default x), ex input: 0x00 x - address 0, return value hex
 * @return	Data, hexadecimal
 *
 */
//+------------------------------------------------------------------
Tango::DevString PSI_PSCIP2::read__psc_register(Tango::DevString argin)
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[6];
	strcpy(argout, "dummy");
	DEBUG_STREAM << "PSI_PSCIP2::read__psc_register(): entering... !" << endl;

	//	Add your own code to control device here

	return argout;
}


}	//	namespace
