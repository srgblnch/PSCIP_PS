//=============================================================================
//
// file :         PSI_PSCIP2Class.h
//
// description :  Include for the PSI_PSCIP2Class root class.
//                This class is represents the singleton class for
//                the PSI_PSCIP2 device class.
//                It contains all properties and methods which the 
//                PSI_PSCIP2 requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _PSI_PSCIP2CLASS_H
#define _PSI_PSCIP2CLASS_H

#include <tango.h>
#include <PSI_PSCIP2.h>


namespace PSI_PSCIP2_ns
{//=====================================
//	Define classes for attributes
//=====================================
class ErrorsAttrib: public Tango::SpectrumAttr
{
public:
	ErrorsAttrib():SpectrumAttr("Errors", Tango::DEV_STRING, Tango::READ, 20) {};
	~ErrorsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_Errors(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Errors_allowed(ty);}
};

class ErrorLabelAttrib: public Tango::SpectrumAttr
{
public:
	ErrorLabelAttrib():SpectrumAttr("ErrorLabel", Tango::DEV_STRING, Tango::READ, 5) {};
	~ErrorLabelAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_ErrorLabel(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_ErrorLabel_allowed(ty);}
};

class ErrorCodesAttrib: public Tango::SpectrumAttr
{
public:
	ErrorCodesAttrib():SpectrumAttr("ErrorCodes", Tango::DEV_SHORT, Tango::READ, 5) {};
	~ErrorCodesAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_ErrorCodes(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_ErrorCodes_allowed(ty);}
};

class IrefAttrib: public Tango::Attr
{
public:
	IrefAttrib():Attr("Iref", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~IrefAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_Iref(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->write_Iref(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Iref_allowed(ty);}
};

class CurrentOffsetAttrib: public Tango::Attr
{
public:
	CurrentOffsetAttrib():Attr("CurrentOffset", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~CurrentOffsetAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_CurrentOffset(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->write_CurrentOffset(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_CurrentOffset_allowed(ty);}
};

class CurrentAttrib: public Tango::Attr
{
public:
	CurrentAttrib():Attr("Current", Tango::DEV_DOUBLE, Tango::READ) {};
	~CurrentAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_Current(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Current_allowed(ty);}
};

class RemoteModeAttrib: public Tango::Attr
{
public:
	RemoteModeAttrib():Attr("RemoteMode", Tango::DEV_BOOLEAN, Tango::READ) {};
	~RemoteModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_RemoteMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_RemoteMode_allowed(ty);}
};

class VoltageAttrib: public Tango::Attr
{
public:
	VoltageAttrib():Attr("Voltage", Tango::DEV_DOUBLE, Tango::READ) {};
	~VoltageAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_Voltage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Voltage_allowed(ty);}
};

class CurrentSetpointAttrib: public Tango::Attr
{
public:
	CurrentSetpointAttrib():Attr("CurrentSetpoint", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~CurrentSetpointAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_CurrentSetpoint(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->write_CurrentSetpoint(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_CurrentSetpoint_allowed(ty);}
};

class ImeasAttrib: public Tango::Attr
{
public:
	ImeasAttrib():Attr("Imeas", Tango::DEV_DOUBLE, Tango::READ) {};
	~ImeasAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PSI_PSCIP2 *>(dev))->read_Imeas(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Imeas_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class Read_PSC_registerCmd : public Tango::Command
{
public:
	Read_PSC_registerCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	Read_PSC_registerCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~Read_PSC_registerCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Read_PSC_register_allowed(any);}
};



class Interlocks_statusClass : public Tango::Command
{
public:
	Interlocks_statusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	Interlocks_statusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~Interlocks_statusClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Interlocks_status_allowed(any);}
};



class Enable_interlocksClass : public Tango::Command
{
public:
	Enable_interlocksClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	Enable_interlocksClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~Enable_interlocksClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Enable_interlocks_allowed(any);}
};



class Disable_interlocksCmd : public Tango::Command
{
public:
	Disable_interlocksCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	Disable_interlocksCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~Disable_interlocksCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Disable_interlocks_allowed(any);}
};



class ResetInterlocksCmd : public Tango::Command
{
public:
	ResetInterlocksCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetInterlocksCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetInterlocksCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_ResetInterlocks_allowed(any);}
};



class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Reset_allowed(any);}
};



class OffClass : public Tango::Command
{
public:
	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_Off_allowed(any);}
};



class OnClass : public Tango::Command
{
public:
	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PSI_PSCIP2 *>(dev))->is_On_allowed(any);}
};



//
// The PSI_PSCIP2Class singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	PSI_PSCIP2Class : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static PSI_PSCIP2Class *init(const char *);
	static PSI_PSCIP2Class *instance();
	~PSI_PSCIP2Class();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	PSI_PSCIP2Class(string &);
	static PSI_PSCIP2Class *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace PSI_PSCIP2_ns

#endif // _PSI_PSCIP2CLASS_H
