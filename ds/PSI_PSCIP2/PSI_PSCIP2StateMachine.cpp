static const char *RcsId = "$Header:  $";
//+=============================================================================
//
// file :         PSI_PSCIP2StateMachine.cpp
//
// description :  C++ source for the PSI_PSCIP2 and its alowed. 
//                method for commands and attributes
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <tango.h>
#include <PSI_PSCIP2.h>
#include <PSI_PSCIP2Class.h>

/*====================================================================
 *	This file contains the methods to allow commands and attributes
 * read or write execution.
 *
 * If you wand to add your own code, add it between 
 * the "End/Re-Start of Generated Code" comments.
 *
 * If you want, you can also add your own methods.
 *====================================================================
 */

namespace PSI_PSCIP2_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Imeas_allowed
// 
// description : 	Read/Write allowed for Imeas attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Imeas_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_CurrentSetpoint_allowed
// 
// description : 	Read/Write allowed for CurrentSetpoint attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_CurrentSetpoint_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::UNKNOWN	||
		get_state() == Tango::INIT	||
		get_state() == Tango::OFF	||
		get_state() == Tango::ALARM	||
		get_state() == Tango::FAULT	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Voltage_allowed
// 
// description : 	Read/Write allowed for Voltage attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Voltage_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::UNKNOWN	||
		get_state() == Tango::INIT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_RemoteMode_allowed
// 
// description : 	Read/Write allowed for RemoteMode attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_RemoteMode_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Current_allowed
// 
// description : 	Read/Write allowed for Current attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Current_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_CurrentOffset_allowed
// 
// description : 	Read/Write allowed for CurrentOffset attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_CurrentOffset_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Iref_allowed
// 
// description : 	Read/Write allowed for Iref attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Iref_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::UNKNOWN	||
		get_state() == Tango::INIT	||
		get_state() == Tango::OFF	||
		get_state() == Tango::ALARM	||
		get_state() == Tango::FAULT	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_ErrorCodes_allowed
// 
// description : 	Read/Write allowed for ErrorCodes attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_ErrorCodes_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_ErrorLabel_allowed
// 
// description : 	Read/Write allowed for ErrorLabel attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_ErrorLabel_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Errors_allowed
// 
// description : 	Read/Write allowed for Errors attribute.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Errors_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}

//=================================================
//		Commands Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_On_allowed
// 
// description : 	Execution allowed for On command.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_On_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Off_allowed
// 
// description : 	Execution allowed for Off command.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Off_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Reset_allowed
// 
// description : 	Execution allowed for Reset command.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Reset_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_ResetInterlocks_allowed
// 
// description : 	Execution allowed for ResetInterlocks command.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_ResetInterlocks_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Disable_interlocks_allowed
// 
// description : 	Execution allowed for Disable_interlocks command.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Disable_interlocks_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::UNKNOWN	||
		get_state() == Tango::INIT	||
		get_state() == Tango::ON	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Enable_interlocks_allowed
// 
// description : 	Execution allowed for Enable_interlocks command.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Enable_interlocks_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::UNKNOWN	||
		get_state() == Tango::INIT	||
		get_state() == Tango::ON	||
		get_state() == Tango::ALARM	||
		get_state() == Tango::FAULT	||
		get_state() == Tango::RUNNING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Interlocks_status_allowed
// 
// description : 	Execution allowed for Interlocks_status command.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Interlocks_status_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		PSI_PSCIP2::is_Read_PSC_register_allowed
// 
// description : 	Execution allowed for Read_PSC_register command.
//
//-----------------------------------------------------------------------------
bool PSI_PSCIP2::is_Read_PSC_register_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}

}	// namespace PSI_PSCIP2_ns
